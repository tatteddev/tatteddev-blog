---
import BaseHead from '../components/BaseHead.astro';
import Footer from '../components/Footer.astro';
import Header from '../components/Header.astro';
import { SITE_DESCRIPTION, SITE_TITLE } from '../consts';
---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
	</head>
	<body>
		<Header />
		
		<!-- Binary Rain Background -->
		<div class="binary-rain"></div>
		
		<!-- Floating Particles -->
		<div class="particles-container">
			<div class="particle"></div>
			<div class="particle"></div>
			<div class="particle"></div>
			<div class="particle"></div>
			<div class="particle"></div>
			<div class="particle"></div>
			<div class="particle"></div>
			<div class="particle"></div>
		</div>
		
		<main class="terminal-container">
			<div class="terminal-window">
				<div class="terminal-header">
					<div class="terminal-controls">
						<span class="control close"></span>
						<span class="control minimize"></span>
						<span class="control maximize"></span>
					</div>
					<div class="terminal-title">terminal@tatteddev:~</div>
					
					<!-- System Monitoring Widgets -->
					<div class="system-monitors">
						<div class="monitor-widget">
							<span class="monitor-label">CPU</span>
							<div class="monitor-bar">
								<div class="monitor-fill cpu-fill"></div>
							</div>
							<span class="monitor-value" id="cpu-value">45%</span>
						</div>
						<div class="monitor-widget">
							<span class="monitor-label">RAM</span>
							<div class="monitor-bar">
								<div class="monitor-fill ram-fill"></div>
							</div>
							<span class="monitor-value" id="ram-value">67%</span>
						</div>
						<div class="monitor-widget">
							<span class="monitor-label">NET</span>
							<div class="monitor-bar">
								<div class="monitor-fill net-fill"></div>
							</div>
							<span class="monitor-value" id="net-value">23%</span>
						</div>
					</div>
				</div>
				<div class="terminal-body" id="terminal-body">
					<!-- Initial loading state -->
					<div class="terminal-line" id="line-0">
						<span class="loading-text">Initializing system...</span>
					</div>
					<div class="terminal-line" id="line-1" style="display: none;">
						<span class="loading-text">Loading user profile...</span>
					</div>
					<div class="terminal-line" id="line-2" style="display: none;">
						<span class="loading-text">Ready.</span>
					</div>
					
					<!-- Command 1: whoami -->
					<div class="terminal-line" id="cmd-1" style="display: none;">
						<span class="prompt">root@tatteddev:~$</span> 
						<span class="command" id="whoami-cmd"></span>
						<span class="cursor" id="cursor-1">_</span>
					</div>
					<div class="output" id="output-1" style="display: none;">
						<div class="neon-sign">
							<div class="neon-line top"></div>
							<div class="sign-text">
								<span class="text-blue">T</span><span class="text-pink">A</span><span class="text-blue">TTED</span><span class="text-pink">DEV</span>
							</div>
							<div class="neon-line bottom"></div>
						</div>
					</div>
					
					<!-- Command 2: network scan -->
					<div class="terminal-line" id="cmd-2" style="display: none;">
						<span class="prompt">root@tatteddev:~$</span> 
						<span class="command glitchy-command" id="nmap-cmd"></span>
						<span class="cursor" id="cursor-2">_</span>
					</div>
					<div class="output matrix-section" id="output-2" style="display: none;">
						<p class="scan-text interference-text" id="matrix-line-1" style="display: none;">...signal interference detected...</p>
						<p class="scan-text interference-text" id="matrix-line-2" style="display: none;">...neural uplink initializing...</p>
						<p class="scan-text" id="matrix-line-3" style="display: none;"><span class="accent-lime">Connection established.</span></p>
						<br id="matrix-break-1" style="display: none;" />
						
						<!-- Binary Cascade -->
						<div class="binary-cascade" id="binary-cascade-1" style="display: none;">
							<pre class="cascade-text">
01001000 01100101 01101100 01101100 01101111
7A 65 72 6F 73 20 61 6E 64 20 6F 6E 65 73
</pre>
						</div>
						
						<p class="scan-text" id="matrix-line-4" style="display: none;">Uploading tatteddev_skills.pkg...</p>
						<div class="progress-bar" id="matrix-progress" style="display: none;">
							<div class="progress-fill"></div>
						</div>
						<br id="matrix-break-2" style="display: none;" />
						<p class="scan-text" id="matrix-line-5" style="display: none;"><span class="accent-lime">Upload successful.</span></p>
						
						<!-- Morpheus Pill Choice -->
						<div class="pill-choice-container" id="pill-choice" style="display: none;">
							<p class="morpheus-text">This is your last chance. After this, there is no going back.</p>
							<p class="morpheus-text">You take the <span class="blue-pill">blue pill</span> - the story ends, you wake up in your bed and believe whatever you want to believe.</p>
							<p class="morpheus-text">You take the <span class="red-pill">red pill</span> - you stay in Wonderland, and I show you how deep the rabbit hole goes.</p>
							<div class="pill-buttons">
								<button class="pill-button blue-choice" id="blue-pill-btn">Take the Blue Pill</button>
								<button class="pill-button red-choice" id="red-pill-btn">Take the Red Pill</button>
							</div>
							<div class="countdown-container">
								<p class="countdown-text" id="countdown-text">Choose wisely... <span class="countdown-timer" id="countdown-timer">10</span> seconds remaining</p>
							</div>
							<p class="choice-timeout" id="choice-timeout" style="display: none;">Time is up... choosing the red pill for you...</p>
						</div>
						
						<!-- Blue Pill Ending -->
						<div class="blue-pill-ending" id="blue-pill-ending" style="display: none;">
							<p class="scan-text">Connection terminated.</p>
							<p class="scan-text">Returning to normal mode...</p>
							<p class="scan-text">Have a nice day, Mr. Anderson.</p>
						</div>
						
						<!-- Matrix Initialization Sequence -->
						<div class="matrix-init" id="matrix-init" style="display: none;">
							<p class="init-text" id="init-line-1" style="display: none;">Establishing secure connection...</p>
							<p class="init-text" id="init-line-2" style="display: none;">Handshake protocol initiated...</p>
							<p class="init-text" id="init-line-3" style="display: none;">Neuronal pathways mapping...</p>
							<p class="init-text" id="init-line-4" style="display: none;">Consciousness transfer beginning...</p>
							
							<!-- Slow Matrix Awakening -->
							<div class="matrix-awakening" id="matrix-awakening" style="display: none;">
								<p class="awaken-text" id="awaken-line-1" style="display: none;">Reality.exe has stopped working...</p>
								<p class="awaken-text" id="awaken-line-2" style="display: none;">Loading new environment...</p>
								<p class="awaken-text" id="awaken-line-3" style="display: none;">Welcome to the real world.</p>
								<br id="awaken-break" style="display: none;" />
								<p class="awaken-text morpheus-voice" id="awaken-line-4" style="display: none;">"Your mind makes it real."</p>
								<br id="awaken-break-2" style="display: none;" />
								<p class="awaken-text final-greeting" id="awaken-line-5" style="display: none;">Hello, Mr. Anderson.</p>
							</div>
						</div>
						
						<p class="scan-text" id="matrix-line-6" style="display: none;">Installing full-stack frameworks...</p>
						<p class="scan-text" id="matrix-line-7" style="display: none;">Installing security protocols...</p>
						<p class="scan-text" id="matrix-line-8" style="display: none;">Installing creative utilities...</p>
						<br id="matrix-break-3" style="display: none;" />
						
						<!-- Matrix Whisper Quote -->
						<div class="matrix-final" id="matrix-final" style="display: none;">
							<p class="matrix-whisper" id="matrix-whisper"><span class="whisper-bracket">~ a voice echoes ~</span><br><span class="neon-pink">"I know kung fu."</span></p>
						</div>
						
						<!-- Final Binary Cascade -->
						<div class="final-cascade" id="final-cascade" style="display: none;">
							<pre class="cascade-fade">
000111010101000101000111...
...
...
_connection_lost_
</pre>
						</div>
					</div>
					</div>

					<!-- Command 3: cat about.txt -->
					<div class="terminal-line" id="cmd-7" style="display: none;">
						<span class="prompt">tatteddev@remote:~$</span> 
						<span class="command" id="cat-cmd"></span>
						<span class="cursor" id="cursor-7">_</span>
					</div>
					<div class="output about-section" id="output-7" style="display: none;">
						<div class="ascii-section-header">
							<pre class="section-ascii about-ascii">
     █████╗ ██████╗  ██████╗ ██╗   ██╗████████╗    ███╗   ███╗███████╗
    ██╔══██╗██╔══██╗██╔═══██╗██║   ██║╚══██╔══╝    ████╗ ████║██╔════╝
    ███████║██████╔╝██║   ██║██║   ██║   ██║       ██╔████╔██║█████╗  
    ██╔══██║██╔══██╗██║   ██║██║   ██║   ██║       ██║╚██╔╝██║██╔══╝  
    ██║  ██║██████╔╝╚██████╔╝╚██████╔╝   ██║       ██║ ╚═╝ ██║███████╗
    ╚═╝  ╚═╝╚═════╝  ╚═════╝  ╚═════╝    ╚═╝       ╚═╝     ╚═╝╚══════╝
							</pre>
						</div>
						<div class="about-content">
							<h2 class="neon-glow-pink">[~] About Me</h2>
							<p>This blog is a digital lab where I explore the things I'm most obsessed with.</p>
							<p>It's equal parts <strong>notebook</strong>, <strong>lab</strong>, and <strong>public build log</strong> — a place to capture what I'm learning, ship experiments, and share tools that help along the way.</p>
						</div>
					</div>

					<!-- Command 8: cat interests.txt -->
					<div class="terminal-line" id="cmd-8" style="display: none;">
						<span class="prompt">tatteddev@remote:~$</span> 
						<span class="command" id="interests-cmd"></span>
						<span class="cursor" id="cursor-8">_</span>
					</div>
					<div class="output interests-section" id="output-8" style="display: none;">
						<div class="ascii-section-header">
							<pre class="section-ascii interests-ascii">
    ███████╗██╗  ██╗██╗██╗     ██╗     ███████╗
    ██╔════╝██║ ██╔╝██║██║     ██║     ██╔════╝
    ███████╗█████╔╝ ██║██║     ██║     ███████╗
    ╚════██║██╔═██╗ ██║██║     ██║     ╚════██║
    ███████║██║  ██╗██║███████╗███████╗███████║
    ╚══════╝╚═╝  ╚═╝╚═╝╚══════╝╚══════╝╚══════╝
    
    ███████╗██╗  ██╗██████╗ ███████╗██████╗ ████████╗██╗███████╗███████╗
    ██╔════╝╚██╗██╔╝██╔══██╗██╔════╝██╔══██╗╚══██╔══╝██║██╔════╝██╔════╝
    █████╗   ╚███╔╝ ██████╔╝█████╗  ██████╔╝   ██║   ██║███████╗█████╗  
    ██╔══╝   ██╔██╗ ██╔═══╝ ██╔══╝  ██╔══██╗   ██║   ██║╚════██║██╔══╝  
    ███████╗██╔╝ ██╗██║     ███████╗██║  ██║   ██║   ██║███████║███████╗
    ╚══════╝╚═╝  ╚═╝╚═╝     ╚══════╝╚═╝  ╚═╝   ╚═╝   ╚═╝╚══════╝╚══════╝
							</pre>
							
							<!-- Holographic Tech Stack Cube positioned inside ASCII header -->
							<div class="tech-cube-container-inside">
								<div class="tech-cube">
									<div class="cube-face front">React</div>
									<div class="cube-face back">Node.js</div>
									<div class="cube-face right">TypeScript</div>
									<div class="cube-face left">Python</div>
									<div class="cube-face top">Azure</div>
									<div class="cube-face bottom">Unity</div>
								</div>
							</div>
						</div>
						<div class="about-content">
							<h2 class="neon-glow-blue">[#] Core Interests & Expertise</h2>
							<p>Expect posts that dive deep into:</p>
							<ul class="terminal-list">
								<li><span class="symbol neon-blue">[*]</span> <strong>Software Engineering</strong> — .NET, SQL, Azure, pipelines, and building scalable systems.</li>
								<li><span class="symbol accent-lime">[+]</span> <strong>Game Development</strong> — Unity, indie dev grind, and interactive experiences.</li>
								<li><span class="symbol neon-pink">[#]</span> <strong>3D & Digital Art</strong> — Blender experiments, design workflows, and creative tools.</li>
								<li><span class="symbol accent-purple">[>]</span> <strong>Robotics & Hardware</strong> — tinkering with Arduino, Raspberry Pi, and 3D printing.</li>
								<li><span class="symbol warning">[!]</span> <strong>Security & Hacking</strong> — ethical hacking, penetration testing, cryptography, and red team tactics.</li>
								<li><span class="symbol neon-blue">[?]</span> <strong>AI & Machine Learning</strong> — practical experiments with LLMs and dev productivity.</li>
								<li><span class="symbol accent-lime">[^]</span> <strong>Cloud & Infrastructure</strong> — automation, observability, and the future of DevOps.</li>
								<li><span class="symbol neon-pink">[@]</span> <strong>Knowledge Systems</strong> — better docs, sprints, and ways to organize complexity.</li>
								<li><span class="symbol accent-purple">[$]</span> <strong>Indie Entrepreneurship</strong> — building HoneyHub and tools for creators.</li>
								<li><span class="symbol warning">[~]</span> <strong>Lifestyle & Growth</strong> — personal productivity, fitness, and balancing tech with life.</li>
							</ul>
						</div>
					</div>
					
					<!-- Command 9: recent posts -->
					<div class="terminal-line" id="cmd-9" style="display: none;">
						<span class="prompt">tatteddev@remote:~$</span> 
						<span class="command" id="recent-cmd"></span>
						<span class="cursor" id="cursor-9">_</span>
					</div>
					<div class="output" id="output-9" style="display: none;">
						<div class="ascii-section-header">
							<pre class="section-ascii blog-ascii">
    ██████╗ ███████╗ ██████╗███████╗███╗   ██╗████████╗    ██████╗  ██████╗ ███████╗████████╗███████╗
    ██╔══██╗██╔════╝██╔════╝██╔════╝████╗  ██║╚══██╔══╝    ██╔══██╗██╔═══██╗██╔════╝╚══██╔══╝██╔════╝
    ██████╔╝█████╗  ██║     █████╗  ██╔██╗ ██║   ██║       ██████╔╝██║   ██║███████╗   ██║   ███████╗
    ██╔══██╗██╔══╝  ██║     ██╔══╝  ██║╚██╗██║   ██║       ██╔═══╝ ██║   ██║╚════██║   ██║   ╚════██║
    ██║  ██║███████╗╚██████╗███████╗██║ ╚████║   ██║       ██║     ╚██████╔╝███████║   ██║   ███████║
    ╚═╝  ╚═╝╚══════╝ ╚═════╝╚══════╝╚═╝  ╚═══╝   ╚═╝       ╚═╝      ╚═════╝ ╚══════╝   ╚═╝   ╚══════╝
							</pre>
						</div>
						<p class="directory-listing">./blog/<a href="/blog/who-is-tatted-dev" class="file-link">who-is-tatted-dev.md</a></p>
						<br />
						<p class="neon-text">→ <a href="/blog" class="file-link">View all posts in ./blog/</a></p>
					</div>

					<!-- Final prompt -->
					<div class="terminal-line" id="final-prompt" style="display: none;">
						<span class="prompt">tatteddev@remote:~$</span> 
						<span class="cursor cursor-blink">_</span>
					</div>
				</div>
			</div>
		</main>
		<Footer />
		
		<script is:inline>
			// Terminal animation sequence
			let currentStep = 0;
			const commands = [
				{ element: 'whoami-cmd', text: 'whoami', delay: 1200 },
				{ element: 'nmap-cmd', text: 'upl0ad --neural tatteddev_skil1s.pkg', delay: 1800 },
				{ element: 'cat-cmd', text: 'cat about.txt', delay: 1600 },
				{ element: 'interests-cmd', text: 'cat interests.txt', delay: 1800 },
				{ element: 'recent-cmd', text: 'find ./blog -name "*.md"', delay: 1400 }
			];
			
			function typeText(elementId, text, speed = 100) {
				return new Promise((resolve) => {
					const element = document.getElementById(elementId);
					if (!element) {
						resolve();
						return;
					}
					
					let i = 0;
					const typeInterval = setInterval(() => {
						if (i < text.length) {
							element.textContent += text.charAt(i);
							i++;
						} else {
							clearInterval(typeInterval);
							resolve();
						}
					}, speed);
				});
			}
			
			function showElement(elementId, delay = 0) {
				return new Promise((resolve) => {
					setTimeout(() => {
						const element = document.getElementById(elementId);
						if (element) {
							element.style.display = 'block';
						}
						resolve();
					}, delay);
				});
			}
			
			function hideElement(elementId) {
				const element = document.getElementById(elementId);
				if (element) {
					element.style.display = 'none';
				}
			}
			
			function hideCursor(cursorId) {
				const cursor = document.getElementById(cursorId);
				if (cursor) {
					cursor.style.display = 'none';
				}
			}
			
			function scrollToBottom() {
				window.scrollTo({
					top: document.body.scrollHeight,
					behavior: 'smooth'
				});
			}
			
			async function startAnimation() {
				// Initial loading sequence
				await new Promise(resolve => setTimeout(resolve, 600));
				await showElement('line-1', 400);
				await showElement('line-2', 600);
				
				// Hide loading lines
				setTimeout(() => {
					hideElement('line-0');
					hideElement('line-1');
					hideElement('line-2');
				}, 800);
				
				// Command 1: whoami
				await showElement('cmd-1', 1000);
				await typeText('whoami-cmd', commands[0].text, 100);
				hideCursor('cursor-1');
				await showElement('output-1', 300);
				scrollToBottom();
				
				// Command 2: Matrix upload sequence
				await showElement('cmd-2', commands[1].delay);
				await typeText('nmap-cmd', commands[1].text, 80);
				hideCursor('cursor-2');
				await showElement('output-2', 300);
				
				// Matrix line-by-line animation
				await showElement('matrix-line-1', 800);
				scrollToBottom();
				await showElement('matrix-line-2', 600);
				scrollToBottom();
				await showElement('matrix-line-3', 500);
				scrollToBottom();
				await showElement('matrix-break-1', 400);
				await showElement('matrix-line-4', 600);
				scrollToBottom();
				await showElement('matrix-progress', 500);
				scrollToBottom();
				
				// Wait for progress bar animation to complete
				await new Promise(resolve => setTimeout(resolve, 3000));
				
				await showElement('matrix-break-2', 200);
				await showElement('matrix-line-5', 500);
				scrollToBottom();
				
				// Morpheus Pill Choice
				await new Promise(resolve => setTimeout(resolve, 1000));
				await showElement('pill-choice', 800);
				scrollToBottom();
				
				// Wait for user choice or timeout
				const userChoice = await waitForPillChoice();
				
				if (userChoice === 'blue') {
					// Blue pill ending - stay in normal world
					await showElement('blue-pill-ending', 600);
					scrollToBottom();
					await new Promise(resolve => setTimeout(resolve, 3000));
					// Continue with normal installation without Matrix stuff
					await continueNormalSequence();
				} else {
					// Red pill or timeout - go into the Matrix
					await enterTheMatrix();
				}
			}
			
			function waitForPillChoice() {
				return new Promise((resolve) => {
					let choiceMade = false;
					let countdown = 10;
					let countdownInterval;
					let timeoutId;
					
					// Set up button event listeners
					const bluePill = document.getElementById('blue-pill-btn');
					const redPill = document.getElementById('red-pill-btn');
					const countdownTimer = document.getElementById('countdown-timer');
					const countdownText = document.getElementById('countdown-text');
					const timeoutMsg = document.getElementById('choice-timeout');
					
					function makeChoice(choice) {
						if (choiceMade) return;
						choiceMade = true;
						clearTimeout(timeoutId);
						clearInterval(countdownInterval);
						
						// Hide pill choice
						document.getElementById('pill-choice').style.display = 'none';
						resolve(choice);
					}
					
					// Update countdown display
					function updateCountdown() {
						if (countdownTimer && countdown > 0) {
							// Force a repaint on mobile devices
							countdownTimer.style.opacity = '0.99';
							setTimeout(() => {
								if (countdownTimer) {
									countdownTimer.textContent = countdown;
									countdownTimer.style.opacity = '1';
								}
							}, 10);
							countdown--;
						} else if (countdownTimer && countdown === 0) {
							// Ensure 0 is displayed before stopping
							countdownTimer.style.opacity = '0.99';
							setTimeout(() => {
								if (countdownTimer) {
									countdownTimer.textContent = '0';
									countdownTimer.style.opacity = '1';
								}
							}, 10);
							countdown--;
						}
					}
					
					// Start countdown
					countdownInterval = setInterval(updateCountdown, 1000);
					
					bluePill.addEventListener('click', () => makeChoice('blue'));
					redPill.addEventListener('click', () => makeChoice('red'));
					
					// Auto-choose red pill after 10 seconds
					timeoutId = setTimeout(() => {
						if (!choiceMade) {
							clearInterval(countdownInterval);
							// Hide countdown and show timeout message
							if (countdownText) countdownText.style.display = 'none';
							if (timeoutMsg) timeoutMsg.style.display = 'block';
							
							setTimeout(() => {
								makeChoice('red');
							}, 2000);
						}
					}, 10000);
				});
			}
			
			async function continueNormalSequence() {
				// Normal installation without Matrix effects
				await showElement('matrix-line-6', 600);
				scrollToBottom();
				await showElement('matrix-line-7', 500);
				scrollToBottom();
				await showElement('matrix-line-8', 600);
				scrollToBottom();
				await showElement('matrix-break-3', 400);
				
				// Continue with regular sections
				await showElement('cmd-7', commands[2].delay);
				await typeText('cat-cmd', commands[2].text, 90);
				hideCursor('cursor-7');
				await showElement('output-7', 400);
				scrollToBottom();
				
				// Command 4: cat interests.txt
				await showElement('cmd-8', commands[3].delay);
				await typeText('interests-cmd', commands[3].text, 85);
				hideCursor('cursor-8');
				await showElement('output-8', 500);
				scrollToBottom();
				
				// Command 5: recent posts
				await showElement('cmd-9', commands[4].delay);
				await typeText('recent-cmd', commands[4].text, 70);
				hideCursor('cursor-9');
				await showElement('output-9', 400);
				scrollToBottom();
				
				// Final prompt
				await showElement('final-prompt', 800);
			}
			
			async function enterTheMatrix() {
				// Pause for dramatic effect
				await new Promise(resolve => setTimeout(resolve, 400));
				
				// Binary Cascade 1 - brief and subtle
				await showElement('binary-cascade-1', 400);
				scrollToBottom();
				await new Promise(resolve => setTimeout(resolve, 800));
				
				// Matrix Initialization - Slow and deliberate
				await showElement('matrix-init', 500);
				scrollToBottom();
				await new Promise(resolve => setTimeout(resolve, 600));
				
				await showElement('init-line-1', 600);
				scrollToBottom();
				await new Promise(resolve => setTimeout(resolve, 800));
				
				await showElement('init-line-2', 600);
				scrollToBottom();
				await new Promise(resolve => setTimeout(resolve, 1000));
				
				await showElement('init-line-3', 600);
				scrollToBottom();
				await new Promise(resolve => setTimeout(resolve, 1200));
				
				await showElement('init-line-4', 600);
				scrollToBottom();
				await new Promise(resolve => setTimeout(resolve, 1000));
				
				// Binary Cascade 2 - transition moment
				await showElement('binary-cascade-2', 400);
				scrollToBottom();
				await new Promise(resolve => setTimeout(resolve, 800));
				
				// Matrix Awakening - The profound moment
				await showElement('matrix-awakening', 800);
				scrollToBottom();
				await new Promise(resolve => setTimeout(resolve, 1000));
				
				await showElement('awaken-line-1', 1000);
				scrollToBottom();
				await new Promise(resolve => setTimeout(resolve, 1500));
				
				await showElement('awaken-line-2', 1000);
				scrollToBottom();
				await new Promise(resolve => setTimeout(resolve, 1200));
				
				await showElement('awaken-line-3', 1000);
				scrollToBottom();
				await new Promise(resolve => setTimeout(resolve, 1500));
				
				await showElement('awaken-break', 200);
				await showElement('awaken-line-4', 1200);
				scrollToBottom();
				await new Promise(resolve => setTimeout(resolve, 2000));
				
				await showElement('awaken-break-2', 200);
				await showElement('awaken-line-5', 1200);
				scrollToBottom();
				await new Promise(resolve => setTimeout(resolve, 1500));
				
				// Continue with regular installation
				await showElement('matrix-line-6', 400);
				scrollToBottom();
				await showElement('matrix-line-7', 300);
				scrollToBottom();
				await showElement('matrix-line-8', 400);
				scrollToBottom();
				await showElement('matrix-break-3', 300);
				
				// Final Matrix Quote
				await showElement('matrix-final', 800);
				scrollToBottom();
				await new Promise(resolve => setTimeout(resolve, 1000));
				
				// Final Binary Cascade (connection lost)
				await showElement('final-cascade', 500);
				scrollToBottom();
				// Wait for cascade animation to complete (4s) then hide it
				await new Promise(resolve => setTimeout(resolve, 4200));
				hideElement('final-cascade');
				
				// Continue with regular sections
				await showElement('cmd-7', commands[2].delay);
				await typeText('cat-cmd', commands[2].text, 90);
				hideCursor('cursor-7');
				await showElement('output-7', 400);
				scrollToBottom();
				
				// Command 4: cat interests.txt
				await showElement('cmd-8', commands[3].delay);
				await typeText('interests-cmd', commands[3].text, 85);
				hideCursor('cursor-8');
				await showElement('output-8', 500);
				scrollToBottom();
				
				// Command 5: recent posts
				await showElement('cmd-9', commands[4].delay);
				await typeText('recent-cmd', commands[4].text, 70);
				hideCursor('cursor-9');
				await showElement('output-9', 400);
				scrollToBottom();
				
				// Final prompt
				await showElement('final-prompt', 800);
			}
			
			// System Monitoring Animation
			function updateSystemMonitors() {
				// CPU usage simulation (30-80%)
				const cpuValue = 30 + Math.random() * 50;
				const cpuElement = document.getElementById('cpu-value');
				const cpuFill = document.querySelector('.cpu-fill');
				if (cpuElement && cpuFill) {
					cpuElement.textContent = Math.round(cpuValue) + '%';
					cpuFill.style.width = cpuValue + '%';
				}
				
				// RAM usage simulation (50-85%)
				const ramValue = 50 + Math.random() * 35;
				const ramElement = document.getElementById('ram-value');
				const ramFill = document.querySelector('.ram-fill');
				if (ramElement && ramFill) {
					ramElement.textContent = Math.round(ramValue) + '%';
					ramFill.style.width = ramValue + '%';
				}
				
				// Network activity simulation (5-90%)
				const netValue = 5 + Math.random() * 85;
				const netElement = document.getElementById('net-value');
				const netFill = document.querySelector('.net-fill');
				if (netElement && netFill) {
					netElement.textContent = Math.round(netValue) + '%';
					netFill.style.width = netValue + '%';
				}
			}
			
			// Start system monitoring
			function startSystemMonitoring() {
				updateSystemMonitors();
				setInterval(updateSystemMonitors, 2000 + Math.random() * 3000); // Random 2-5 second updates
			}

			// Random terminal glitch effect
			function triggerRandomGlitch() {
				const terminal = document.querySelector('.terminal-window');
				if (terminal) {
					// Add temporary glitch class
					terminal.classList.add('glitch-active');
					
					// Remove after short duration
					setTimeout(() => {
						terminal.classList.remove('glitch-active');
					}, 300);
				}
				
				// Schedule next random glitch (between 15-45 seconds)
				const nextGlitch = 15000 + Math.random() * 30000;
				setTimeout(triggerRandomGlitch, nextGlitch);
			}

			// Start animation when page loads
			window.addEventListener('load', () => {
				setTimeout(startAnimation, 500);
				setTimeout(startSystemMonitoring, 1000);
				setTimeout(triggerRandomGlitch, 10000); // First glitch after 10 seconds
			});
			
			// Make scrollToBottom available globally
			window.scrollToBottom = scrollToBottom;
		</script>
	</body>
</html>

<style>
	/* Ensure header and footer appear above background effects */
	:global(header) {
		position: relative;
		z-index: 100;
	}

	:global(footer) {
		position: relative;
		z-index: 100;
	}

	/* Binary Rain Background */
	.binary-rain {
		position: fixed;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		pointer-events: none;
		z-index: -2;
		overflow: hidden;
	}
	
	.binary-rain::before,
	.binary-rain::after {
		content
		position: absolute;
		top: -100vh;
		left: 0;
		width: 100%;
		height: 300vh;
		color: rgba(0, 255, 65, 0.06);
		font-family: 'Courier New', monospace;
		font-size: 10px;
		line-height: 12px;
		word-wrap: break-word;
		animation: binary-fall 20s linear infinite;
		white-space: pre-wrap;
		letter-spacing: 2px;
	}
	
	.binary-rain::after {
		content
		animation-delay: -10s;
		color: rgba(0, 255, 65, 0.04);
		font-size: 8px;
		line-height: 10px;
		animation-duration: 25s;
		letter-spacing: 1px;
	}
	
	@keyframes binary-fall {
		0% { transform: translateY(0); }
		100% { transform: translateY(100vh); }
	}
	
	/* Holographic Tech Stack Cube */
	.interests-section {
		position: relative;
	}

	.tech-cube-container-right {
		position: absolute;
		right: 70px;
		top: -15px;
		width: 70px;
		height: 70px;
		perspective: 180px;
		pointer-events: none;
		z-index: 10;
	}
	
	/* New positioning for cube inside ASCII header */
	.tech-cube-container-inside {
		position: absolute;
		right: 50px;
		top: 40px;
		width: 60px;
		height: 60px;
		perspective: 150px;
		pointer-events: none;
		z-index: 15;
	}
	
	.tech-cube-container-inside .cube-face {
		width: 60px;
		height: 60px;
		font-size: 9px;
	}
	
	.tech-cube-container-inside .cube-face.front { transform: rotateY(0deg) translateZ(30px); }
	.tech-cube-container-inside .cube-face.back { transform: rotateY(180deg) translateZ(30px); }
	.tech-cube-container-inside .cube-face.right { transform: rotateY(90deg) translateZ(30px); }
	.tech-cube-container-inside .cube-face.left { transform: rotateY(-90deg) translateZ(30px); }
	.tech-cube-container-inside .cube-face.top { transform: rotateX(90deg) translateZ(30px); }
	.tech-cube-container-inside .cube-face.bottom { transform: rotateX(-90deg) translateZ(30px); }

	/* Mobile responsive - hide cube and system monitors on smaller screens */
	@media (max-width: 768px) {
		.tech-cube-container-right {
			display: none !important;
		}
		
		.tech-cube-container-inside {
			display: none !important;
		}
		
		.system-monitors {
			display: none !important;
		}
		
		.terminal-header .system-monitors {
			display: none !important;
		}
	}

	/* Tablet adjustments */
	@media (max-width: 1024px) and (min-width: 769px) {
		.tech-cube-container-right {
			right: 60px;
			top: 10px;
			width: 60px;
			height: 60px;
		}
		
		.tech-cube-container-inside {
			right: 40px;
			top: 45px;
			width: 50px;
			height: 50px;
		}
		
		.tech-cube-container-inside .cube-face {
			width: 50px;
			height: 50px;
			font-size: 8px;
		}
		
		.tech-cube-container-inside .cube-face.front { transform: rotateY(0deg) translateZ(25px); }
		.tech-cube-container-inside .cube-face.back { transform: rotateY(180deg) translateZ(25px); }
		.tech-cube-container-inside .cube-face.right { transform: rotateY(90deg) translateZ(25px); }
		.tech-cube-container-inside .cube-face.left { transform: rotateY(-90deg) translateZ(25px); }
		.tech-cube-container-inside .cube-face.top { transform: rotateX(90deg) translateZ(25px); }
		.tech-cube-container-inside .cube-face.bottom { transform: rotateX(-90deg) translateZ(25px); }
		
		.cube-face {
			width: 60px;
			height: 60px;
			font-size: 9px;
		}
		
		.cube-face.front { transform: rotateY(0deg) translateZ(30px); }
		.cube-face.back { transform: rotateY(180deg) translateZ(30px); }
		.cube-face.right { transform: rotateY(90deg) translateZ(30px); }
		.cube-face.left { transform: rotateY(-90deg) translateZ(30px); }
		.cube-face.top { transform: rotateX(90deg) translateZ(30px); }
		.cube-face.bottom { transform: rotateX(-90deg) translateZ(30px); }
	}
	
	.tech-cube {
		position: relative;
		width: 100%;
		height: 100%;
		transform-style: preserve-3d;
		animation: cube-rotate 15s infinite linear;
	}
	
	.cube-face {
		position: absolute;
		width: 70px;
		height: 70px;
		background: rgba(0, 255, 65, 0.05);
		border: 1px solid var(--accent-lime);
		display: flex;
		align-items: center;
		justify-content: center;
		font-family: 'Courier New', monospace;
		font-size: 10px;
		font-weight: bold;
		color: var(--accent-lime);
		text-shadow: 0 0 3px var(--accent-lime);
		backdrop-filter: blur(0.5px);
		box-shadow: 0 0 5px rgba(0, 255, 65, 0.3);
	}
	
	.cube-face.front { transform: rotateY(0deg) translateZ(35px); }
	.cube-face.back { transform: rotateY(180deg) translateZ(35px); }
	.cube-face.right { transform: rotateY(90deg) translateZ(35px); }
	.cube-face.left { transform: rotateY(-90deg) translateZ(35px); }
	.cube-face.top { transform: rotateX(90deg) translateZ(35px); }
	.cube-face.bottom { transform: rotateX(-90deg) translateZ(35px); }
	
	@keyframes cube-rotate {
		0% { transform: rotateX(0) rotateY(0); }
		25% { transform: rotateX(90deg) rotateY(90deg); }
		50% { transform: rotateX(180deg) rotateY(180deg); }
		75% { transform: rotateX(270deg) rotateY(270deg); }
		100% { transform: rotateX(360deg) rotateY(360deg); }
	}
	
	/* Floating Particles */
	.particles-container {
		position: fixed;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		pointer-events: none;
		z-index: -1;
		overflow: hidden;
	}
	
	.particle {
		position: absolute;
		width: 2px;
		height: 2px;
		background: var(--neon-blue);
		border-radius: 50%;
		box-shadow: 0 0 6px var(--neon-blue);
		animation: particle-float 20s infinite linear;
	}
	
	.particle:nth-child(1) {
		left: 10%;
		animation-delay: 0s;
		animation-duration: 18s;
	}
	
	.particle:nth-child(2) {
		left: 20%;
		animation-delay: -3s;
		animation-duration: 22s;
		background: var(--neon-pink);
		box-shadow: 0 0 6px var(--neon-pink);
	}
	
	.particle:nth-child(3) {
		left: 35%;
		animation-delay: -6s;
		animation-duration: 25s;
	}
	
	.particle:nth-child(4) {
		left: 50%;
		animation-delay: -9s;
		animation-duration: 20s;
		background: var(--accent-lime);
		box-shadow: 0 0 6px var(--accent-lime);
	}
	
	.particle:nth-child(5) {
		left: 65%;
		animation-delay: -12s;
		animation-duration: 19s;
	}
	
	.particle:nth-child(6) {
		left: 75%;
		animation-delay: -15s;
		animation-duration: 23s;
		background: var(--accent-purple);
		box-shadow: 0 0 6px var(--accent-purple);
	}
	
	.particle:nth-child(7) {
		left: 85%;
		animation-delay: -18s;
		animation-duration: 21s;
		background: var(--neon-pink);
		box-shadow: 0 0 6px var(--neon-pink);
	}
	
	.particle:nth-child(8) {
		left: 95%;
		animation-delay: -21s;
		animation-duration: 24s;
	}
	
	@keyframes particle-float {
		0% {
			transform: translateY(100vh) translateX(-20px);
			opacity: 0;
		}
		10% {
			opacity: 1;
		}
		90% {
			opacity: 1;
		}
		100% {
			transform: translateY(-100px) translateX(20px);
			opacity: 0;
		}
	}

	.terminal-container {
		padding: 2rem 1rem;
		display: flex;
		justify-content: center;
		align-items: flex-start;
		min-height: 80vh;
		position: relative;
		z-index: 2;
	}
	
	.terminal-window {
		background: var(--bg-dark);
		border: 2px solid var(--neon-blue);
		border-radius: 8px;
		box-shadow: 
			0 0 20px rgba(0, 246, 255, 0.3),
			inset 0 0 20px rgba(0, 246, 255, 0.05);
		width: 100%;
		max-width: 900px;
		font-family: 'Courier New', monospace;
		font-size: 14px;
		line-height: 1.4;
		position: relative;
		z-index: 1;
		animation: terminal-breathing 4s ease-in-out infinite;
		overflow: hidden;
	}

	/* Terminal glitch overlay */
	.terminal-window::before {
		content: '';
		position: absolute;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		background: 
			linear-gradient(90deg, transparent 0%, transparent 98%, rgba(0, 255, 0, 0.03) 100%),
			linear-gradient(0deg, transparent 0%, rgba(0, 255, 255, 0.02) 50%, transparent 100%);
		pointer-events: none;
		z-index: 10;
		opacity: 0;
		animation: terminal-glitch 8s infinite;
	}

	/* Random glitch lines */
	.terminal-window::after {
		content: '';
		position: absolute;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		background-image: 
			linear-gradient(90deg, transparent 0%, rgba(0, 246, 255, 0.1) 50%, transparent 100%);
		background-size: 100% 2px;
		background-repeat: repeat-y;
		pointer-events: none;
		z-index: 11;
		opacity: 0;
		animation: glitch-lines 12s infinite;
		transform: translateX(-100%);
	}

	/* Active glitch state */
	.terminal-window.glitch-active {
		animation: terminal-breathing 4s ease-in-out infinite, glitch-shake 0.1s infinite;
	}

	.terminal-window.glitch-active::before {
		animation: terminal-glitch 0.3s infinite, rapid-flicker 0.05s infinite;
	}

	.terminal-window.glitch-active::after {
		animation: glitch-lines 0.2s infinite, horizontal-shift 0.08s infinite;
	}

	@keyframes glitch-shake {
		0%, 100% { transform: translate(0px, 0px); }
		25% { transform: translate(-1px, 1px); }
		50% { transform: translate(1px, -1px); }
		75% { transform: translate(-1px, -1px); }
	}

	@keyframes rapid-flicker {
		0%, 100% { opacity: 0.8; }
		50% { opacity: 0.2; }
	}

	@keyframes horizontal-shift {
		0% { transform: translateX(-2px); }
		25% { transform: translateX(2px); }
		50% { transform: translateX(-1px); }
		75% { transform: translateX(1px); }
		100% { transform: translateX(0px); }
	}
	
	/* Breathing terminal border animation */
	@keyframes terminal-breathing {
		0%, 100% {
			border-color: var(--neon-blue);
			box-shadow: 
				0 0 20px rgba(0, 246, 255, 0.3),
				0 0 40px rgba(0, 246, 255, 0.1),
				inset 0 0 20px rgba(0, 246, 255, 0.05);
		}
		25% {
			border-color: #00d9ff;
			box-shadow: 
				0 0 24px rgba(0, 246, 255, 0.35),
				0 0 48px rgba(0, 246, 255, 0.12),
				0 0 80px rgba(0, 246, 255, 0.05),
				inset 0 0 24px rgba(0, 246, 255, 0.06);
		}
		50% {
			border-color: #00e6ff;
			box-shadow: 
				0 0 28px rgba(0, 246, 255, 0.4),
				0 0 56px rgba(0, 246, 255, 0.15),
				0 0 90px rgba(0, 246, 255, 0.08),
				inset 0 0 28px rgba(0, 246, 255, 0.07);
		}
		75% {
			border-color: #00d9ff;
			box-shadow: 
				0 0 24px rgba(0, 246, 255, 0.35),
				0 0 48px rgba(0, 246, 255, 0.12),
				0 0 80px rgba(0, 246, 255, 0.05),
				inset 0 0 24px rgba(0, 246, 255, 0.06);
		}
	}

	/* Terminal glitch animations */
	@keyframes terminal-glitch {
		0%, 95% {
			opacity: 0;
		}
		96% {
			opacity: 0.8;
			transform: translate(0px, 0px);
		}
		97% {
			opacity: 1;
			transform: translate(2px, -1px);
		}
		98% {
			opacity: 0.9;
			transform: translate(-1px, 1px);
		}
		99% {
			opacity: 1;
			transform: translate(1px, 0px);
		}
		100% {
			opacity: 0;
			transform: translate(0px, 0px);
		}
	}

	@keyframes glitch-lines {
		0%, 90% {
			opacity: 0;
			transform: translateX(-100%);
		}
		91% {
			opacity: 0.3;
			transform: translateX(-50%);
		}
		93% {
			opacity: 0.8;
			transform: translateX(20%);
		}
		95% {
			opacity: 0.6;
			transform: translateX(100%);
		}
		97% {
			opacity: 0.9;
			transform: translateX(-20%);
		}
		100% {
			opacity: 0;
			transform: translateX(-100%);
		}
	}
	
	.terminal-header {
		background: var(--surface);
		padding: 0.5rem 1rem;
		border-bottom: 1px solid var(--neon-blue);
		display: flex;
		align-items: center;
		gap: 1rem;
		border-radius: 6px 6px 0 0;
	}
	
	.terminal-controls {
		display: flex;
		gap: 0.5rem;
	}
	
	.control {
		width: 12px;
		height: 12px;
		border-radius: 50%;
		cursor: pointer;
	}
	
	.control.close {
		background: #ff5f56;
		box-shadow: 0 0 8px rgba(255, 95, 86, 0.5);
	}
	
	.control.minimize {
		background: #ffbd2e;
		box-shadow: 0 0 8px rgba(255, 189, 46, 0.5);
	}
	
	.control.maximize {
		background: #27ca3f;
		box-shadow: 0 0 8px rgba(39, 202, 63, 0.5);
	}
	
	.terminal-title {
		color: var(--neutral-light);
		font-weight: bold;
		font-size: 12px;
		flex: 1;
	}

	/* System Monitoring Widgets */
	.system-monitors {
		display: flex;
		gap: 1rem;
		align-items: center;
		animation: system-heartbeat 4s ease-in-out infinite;
	}

	@keyframes system-heartbeat {
		0%, 100% {
			opacity: 0.85;
		}
		25% {
			opacity: 0.9;
		}
		50% {
			opacity: 0.95;
		}
		75% {
			opacity: 0.9;
		}
	}

	.monitor-widget {
		display: flex;
		align-items: center;
		gap: 0.3rem;
		font-size: 10px;
		color: var(--neutral-light);
	}

	.monitor-label {
		font-weight: bold;
		color: var(--neon-blue);
		text-shadow: 0 0 3px var(--neon-blue);
		min-width: 25px;
	}

	.monitor-bar {
		width: 40px;
		height: 8px;
		background: rgba(0, 0, 0, 0.3);
		border: 1px solid var(--neutral-dark);
		border-radius: 2px;
		overflow: hidden;
		position: relative;
	}

	.monitor-fill {
		height: 100%;
		transition: width 0.3s ease;
		position: relative;
		border-radius: 1px;
	}

	.cpu-fill {
		background: linear-gradient(90deg, var(--accent-lime), #ffff00);
		box-shadow: 0 0 6px var(--accent-lime);
		width: 45%;
		animation: cpu-pulse 2s ease-in-out infinite alternate;
	}

	.ram-fill {
		background: linear-gradient(90deg, var(--neon-blue), #00aaff);
		box-shadow: 0 0 6px var(--neon-blue);
		width: 67%;
		animation: ram-pulse 3s ease-in-out infinite alternate;
	}

	.net-fill {
		background: linear-gradient(90deg, var(--neon-pink), #ff0080);
		box-shadow: 0 0 6px var(--neon-pink);
		width: 23%;
		animation: net-activity 1.5s ease-in-out infinite;
	}

	.monitor-value {
		font-weight: bold;
		min-width: 30px;
		text-align: right;
	}

	@keyframes cpu-pulse {
		0% { width: 35%; opacity: 0.8; }
		100% { width: 65%; opacity: 1; }
	}

	@keyframes ram-pulse {
		0% { width: 60%; opacity: 0.8; }
		100% { width: 75%; opacity: 1; }
	}

	@keyframes net-activity {
		0%, 100% { width: 10%; opacity: 0.6; }
		25% { width: 50%; opacity: 1; }
		50% { width: 30%; opacity: 0.8; }
		75% { width: 80%; opacity: 1; }
	}
	
	.terminal-body {
		padding: 1.5rem;
		color: var(--neutral-light);
	}
	
	.terminal-line {
		margin-bottom: 0.5rem;
		position: relative;
	}
	
	.prompt {
		color: var(--neon-blue);
		text-shadow: 0 0 5px var(--neon-blue);
		font-weight: bold;
	}
	
	.command {
		color: var(--accent-lime);
		margin-left: 0.5rem;
	}
	
	.output {
		margin: 0.5rem 0 1.5rem 0;
		padding-left: 1rem;
		border-left: 2px solid rgba(0, 246, 255, 0.2);
	}
	
	.ascii-art {
		color: var(--neon-pink);
		text-shadow: 0 0 10px var(--neon-pink);
		font-size: 8px;
		line-height: 1;
		margin: 1rem 0;
		overflow-x: auto;
	}
	
	.neon-sign {
		display: flex;
		flex-direction: column;
		align-items: center;
		margin: 2rem 0;
		padding: 1.5rem;
	}
	
	.neon-line {
		width: 100%;
		max-width: 400px;
		height: 3px;
		background: linear-gradient(90deg, 
			transparent 0%, 
			var(--neon-pink) 10%, 
			var(--neon-pink) 90%, 
			transparent 100%
		);
		box-shadow: 
			0 0 4px var(--neon-pink),
			0 0 8px var(--neon-pink),
			0 0 12px var(--neon-pink);
		border-radius: 2px;
		position: relative;
		overflow: hidden;
	}
	
	.neon-line::before {
		content: '';
		position: absolute;
		top: 0;
		left: -100%;
		width: 100%;
		height: 100%;
		background: linear-gradient(90deg, 
			transparent 0%, 
			rgba(255, 255, 255, 0.4) 50%, 
			transparent 100%
		);
		animation: neon-sweep 3s infinite;
	}
	
	.neon-line.top {
		margin-bottom: 1rem;
		animation: neon-flicker 4s infinite;
	}
	
	.neon-line.bottom {
		margin-top: 1rem;
		animation: neon-flicker 5s infinite;
	}
	
	@keyframes neon-sweep {
		0% {
			left: -100%;
		}
		100% {
			left: 100%;
		}
	}
	
	.sign-text {
		font-family: 'Arial', sans-serif;
		font-size: 3rem;
		font-weight: bold;
		letter-spacing: 0.3rem;
		text-transform: uppercase;
		margin: 0;
		text-align: center;
	}
	
	.text-blue {
		color: var(--neon-blue);
		text-shadow: 
			0 0 2px var(--neon-blue),
			0 0 4px var(--neon-blue),
			0 0 8px var(--neon-blue),
			0 0 12px var(--neon-blue),
			0 0 16px var(--neon-blue);
		animation: blue-neon-glow 2s ease-in-out infinite alternate;
		position: relative;
	}
	
	.text-blue::before {
		content: attr(data-text);
		position: absolute;
		top: 0;
		left: 0;
		color: rgba(0, 246, 255, 0.1);
		text-shadow: none;
		z-index: -1;
		transform: scale(1.02);
	}
	
	.text-pink {
		color: var(--neon-pink);
		text-shadow: 
			0 0 2px var(--neon-pink),
			0 0 4px var(--neon-pink),
			0 0 8px var(--neon-pink),
			0 0 12px var(--neon-pink),
			0 0 16px var(--neon-pink);
		animation: pink-neon-glow 2.5s ease-in-out infinite alternate;
		position: relative;
	}
	
	.text-pink::before {
		content: attr(data-text);
		position: absolute;
		top: 0;
		left: 0;
		color: rgba(255, 0, 212, 0.1);
		text-shadow: none;
		z-index: -1;
		transform: scale(1.02);
	}
	
	@keyframes neon-flicker {
		0%, 100% {
			opacity: 1;
			box-shadow: 
				0 0 4px var(--neon-pink),
				0 0 8px var(--neon-pink),
				0 0 12px var(--neon-pink);
		}
		95% {
			opacity: 1;
			box-shadow: 
				0 0 4px var(--neon-pink),
				0 0 8px var(--neon-pink),
				0 0 12px var(--neon-pink);
		}
		96% {
			opacity: 0.8;
			box-shadow: 
				0 0 2px var(--neon-pink),
				0 0 4px var(--neon-pink);
		}
		97% {
			opacity: 1;
			box-shadow: 
				0 0 4px var(--neon-pink),
				0 0 8px var(--neon-pink),
				0 0 12px var(--neon-pink);
		}
		98% {
			opacity: 0.9;
		}
		99% {
			opacity: 1;
		}
	}
	
	@keyframes blue-neon-glow {
		0% {
			text-shadow: 
				0 0 2px var(--neon-blue),
				0 0 4px var(--neon-blue),
				0 0 8px var(--neon-blue),
				0 0 12px var(--neon-blue),
				0 0 16px var(--neon-blue);
			filter: brightness(1);
		}
		25% {
			text-shadow: 
				0 0 1px var(--neon-blue),
				0 0 2px var(--neon-blue),
				0 0 4px var(--neon-blue),
				0 0 8px var(--neon-blue),
				0 0 12px var(--neon-blue);
			filter: brightness(0.9);
		}
		50% {
			text-shadow: 
				0 0 2px var(--neon-blue),
				0 0 4px var(--neon-blue),
				0 0 8px var(--neon-blue),
				0 0 12px var(--neon-blue),
				0 0 20px var(--neon-blue);
			filter: brightness(1.1);
		}
		75% {
			text-shadow: 
				0 0 1px var(--neon-blue),
				0 0 3px var(--neon-blue),
				0 0 6px var(--neon-blue),
				0 0 10px var(--neon-blue),
				0 0 14px var(--neon-blue);
			filter: brightness(0.95);
		}
		100% {
			text-shadow: 
				0 0 3px var(--neon-blue),
				0 0 6px var(--neon-blue),
				0 0 10px var(--neon-blue),
				0 0 15px var(--neon-blue),
				0 0 20px var(--neon-blue);
			filter: brightness(1.2);
		}
	}
	
	@keyframes pink-neon-glow {
		0% {
			text-shadow: 
				0 0 2px var(--neon-pink),
				0 0 4px var(--neon-pink),
				0 0 8px var(--neon-pink),
				0 0 12px var(--neon-pink),
				0 0 16px var(--neon-pink);
			filter: brightness(1);
		}
		20% {
			text-shadow: 
				0 0 1px var(--neon-pink),
				0 0 2px var(--neon-pink),
				0 0 4px var(--neon-pink),
				0 0 8px var(--neon-pink),
				0 0 12px var(--neon-pink);
			filter: brightness(0.85);
		}
		40% {
			text-shadow: 
				0 0 3px var(--neon-pink),
				0 0 6px var(--neon-pink),
				0 0 10px var(--neon-pink),
				0 0 15px var(--neon-pink),
				0 0 22px var(--neon-pink);
			filter: brightness(1.15);
		}
		60% {
			text-shadow: 
				0 0 1px var(--neon-pink),
				0 0 3px var(--neon-pink),
				0 0 6px var(--neon-pink),
				0 0 10px var(--neon-pink),
				0 0 14px var(--neon-pink);
			filter: brightness(0.9);
		}
		80% {
			text-shadow: 
				0 0 2px var(--neon-pink),
				0 0 5px var(--neon-pink),
				0 0 9px var(--neon-pink),
				0 0 14px var(--neon-pink),
				0 0 18px var(--neon-pink);
			filter: brightness(1.05);
		}
		100% {
			text-shadow: 
				0 0 4px var(--neon-pink),
				0 0 8px var(--neon-pink),
				0 0 12px var(--neon-pink),
				0 0 18px var(--neon-pink),
				0 0 24px var(--neon-pink);
			filter: brightness(1.3);
		}
	}
	
	.neon-text {
		color: var(--neutral-light);
		margin: 0.25rem 0;
	}
	
	.status-active {
		color: var(--accent-lime);
		text-shadow: 0 0 5px var(--accent-lime);
		font-weight: bold;
	}
	
	.highlight {
		color: var(--neon-blue);
		text-shadow: 0 0 5px var(--neon-blue);
	}
	
	.terminal-list {
		list-style: none;
		padding: 0;
		margin: 1rem 0;
	}
	
	.terminal-list li {
		margin: 0.5rem 0;
		color: var(--neutral-light);
	}
	
	.symbol {
		font-weight: bold;
		margin-right: 0.5rem;
		text-shadow: 0 0 5px currentColor;
	}
	
	.symbol.neon-blue { color: var(--neon-blue); }
	.symbol.accent-lime { color: var(--accent-lime); }
	.symbol.neon-pink { color: var(--neon-pink); }
	.symbol.accent-purple { color: var(--accent-purple); }
	.symbol.warning { color: var(--warning); }
	
	.directory-listing {
		font-family: 'Courier New', monospace;
		color: var(--neutral-mid);
		margin: 0.25rem 0;
	}
	
	/* Hacker Terminal Styles */
	.scan-section, .ssh-section, .process-section, .log-section, .matrix-section {
		font-family: 'Courier New', monospace;
		font-size: 0.9rem;
		line-height: 1.4;
	}
	
	/* Matrix Easter Egg Styles */
	.progress-bar {
		width: 100%;
		height: 20px;
		background: rgba(0, 255, 65, 0.1);
		border: 1px solid var(--accent-lime);
		border-radius: 2px;
		margin: 0.5rem 0;
		overflow: hidden;
		position: relative;
	}
	
	.progress-fill {
		height: 100%;
		background: linear-gradient(90deg, var(--accent-lime), var(--neon-blue));
		width: 0%;
		animation: matrix-upload 3s ease-in-out forwards;
		animation-delay: 1s;
		box-shadow: 0 0 10px var(--accent-lime);
	}
	
	@keyframes matrix-upload {
		0% { width: 0%; }
		20% { width: 15%; }
		40% { width: 45%; }
		60% { width: 70%; }
		80% { width: 90%; }
		100% { width: 100%; }
	}
	
	.matrix-quote {
		font-size: 1.1rem;
		font-weight: bold;
		text-align: center;
		margin: 1rem 0;
		text-shadow: 0 0 10px var(--neon-pink);
		animation: matrix-glow 2s ease-in-out infinite alternate;
	}
	
	/* Matrix Takeover Effects */
	.matrix-takeover {
		background: rgba(0, 0, 0, 0.9);
		border: 2px solid var(--accent-lime);
		padding: 1rem;
		margin: 1rem 0;
		border-radius: 4px;
		animation: matrix-flicker 0.5s ease-in-out;
	}
	
	/* Glitchy Command Effects */
	.glitchy-command {
		animation: command-glitch 0.1s ease-in-out infinite alternate;
	}
	
	.interference-text {
		color: #666;
		font-style: italic;
		animation: text-interference 2s ease-in-out;
	}
	
	/* Binary Cascade Effects */
	.binary-cascade {
		margin: 1.2rem 0;
		padding: 0;
		background: transparent;
		border: none;
		overflow: hidden;
	}
	
	.cascade-text {
		font-family: 'Courier New', monospace;
		font-size: 11px;
		line-height: 1.4;
		color: var(--accent-lime);
		margin: 0;
		animation: binary-rain 1.5s ease-out;
		text-shadow: 0 0 5px var(--accent-lime);
		padding-left: 1rem;
	}
	
	.glitch-cascade {
		animation: cascade-glitch 0.8s ease-in-out;
	}
	
	/* Matrix Initialization - Calm and Atmospheric */
	.matrix-init {
		background: rgba(0, 5, 0, 0.9);
		border: 1px solid rgba(0, 255, 0, 0.3);
		padding: 2rem;
		margin: 2rem 0;
		border-radius: 4px;
		animation: gentle-glow 3s ease-in-out infinite alternate;
	}
	
	.init-text {
		color: rgba(0, 255, 0, 0.8);
		font-family: 'Courier New', monospace;
		margin: 1rem 0;
		font-size: 0.9rem;
		opacity: 0;
		animation: fade-in-slow 2s ease-out forwards;
	}
	
	/* Matrix Awakening - Deep and Profound */
	.matrix-awakening {
		background: rgba(0, 0, 0, 0.95);
		border: 1px solid rgba(0, 255, 0, 0.5);
		padding: 2.5rem;
		margin: 2rem 0;
		border-radius: 4px;
		text-align: center;
	}
	
	.awaken-text {
		color: rgba(0, 255, 0, 0.9);
		font-family: 'Courier New', monospace;
		margin: 1.5rem 0;
		font-size: 1rem;
		opacity: 0;
		animation: profound-emerge 3s ease-out forwards;
	}
	
	.morpheus-voice {
		color: rgba(0, 200, 100, 1) !important;
		font-style: italic;
		font-size: 1.1rem;
		text-shadow: 0 0 10px rgba(0, 255, 0, 0.3);
	}
	
	.final-greeting {
		color: rgba(0, 255, 0, 1) !important;
		font-weight: bold;
		font-size: 1.2rem;
		text-shadow: 0 0 15px rgba(0, 255, 0, 0.5);
		letter-spacing: 1px;
	}
	
	/* Matrix Whisper Effect */
	.matrix-whisper {
		font-family: 'Courier New', monospace;
		text-align: center;
		font-size: 1.1rem;
		margin: 1rem 0;
	}
	
	.whisper-bracket {
		color: var(--accent-lime);
		font-size: 0.9rem;
		opacity: 0.8;
	}
	
	/* Final Cascade Effect */
	.final-cascade {
		margin: 1.5rem 0;
		text-align: center;
	}
	
	.cascade-fade {
		font-family: 'Courier New', monospace;
		font-size: 12px;
		line-height: 1.4;
		color: var(--accent-lime);
		margin: 0;
		animation: fade-cascade 4s ease-out forwards;
		opacity: 1;
	}
	
	/* Hacking Sequence Effects */
	.hacking-sequence {
		background: rgba(20, 0, 0, 0.9);
		border: 2px solid var(--error-red);
		padding: 1rem;
		margin: 1rem 0;
		border-radius: 4px;
		animation: hack-flicker 0.3s ease-in-out infinite;
	}
	
	.hack-text {
		color: var(--error-red);
		font-family: 'Courier New', monospace;
		margin: 0.3rem 0;
		animation: hack-glitch 0.6s ease-in-out infinite;
	}
	
	.matrix-final {
		background: rgba(0, 20, 0, 0.9);
		border: 2px solid var(--neon-pink);
		padding: 2rem;
		margin: 1rem 0;
		border-radius: 4px;
		text-align: center;
		animation: final-emerge 2s ease-out;
	}
	
	.matrix-interference {
		color: var(--accent-lime);
		font-family: 'Courier New', monospace;
		text-align: center;
		margin: 0.5rem 0;
		animation: glitch-text 0.8s ease-in-out infinite;
	}
	
	/* Pill Choice Interface */
	.pill-choice-container {
		background: rgba(0, 0, 0, 0.95);
		border: 2px solid var(--neutral-light);
		padding: 2rem;
		margin: 2rem 0;
		border-radius: 8px;
		text-align: center;
		animation: pill-choice-appear 1s ease-out;
	}
	
	.morpheus-text {
		color: var(--neutral-light);
		font-family: 'Courier New', monospace;
		font-size: 1rem;
		line-height: 1.6;
		margin: 1rem 0;
	}
	
	.blue-pill {
		color: #4a90e2;
		font-weight: bold;
		text-shadow: 0 0 5px #4a90e2;
	}
	
	.red-pill {
		color: #ff3333;
		font-weight: bold;
		text-shadow: 0 0 5px #ff3333;
	}
	
	.pill-buttons {
		display: flex;
		justify-content: center;
		gap: 2rem;
		margin: 2rem 0;
	}
	
	.pill-button {
		padding: 1rem 2rem;
		border: 2px solid;
		background: transparent;
		color: white;
		font-family: 'Courier New', monospace;
		font-size: 1rem;
		cursor: pointer;
		border-radius: 25px;
		transition: all 0.3s ease;
		min-width: 150px;
	}
	
	.blue-choice {
		border-color: #4a90e2;
		color: #4a90e2;
	}
	
	.blue-choice:hover {
		background: #4a90e2;
		color: black;
		box-shadow: 0 0 20px #4a90e2;
	}
	
	.red-choice {
		border-color: #ff3333;
		color: #ff3333;
	}
	
	.red-choice:hover {
		background: #ff3333;
		color: black;
		box-shadow: 0 0 20px #ff3333;
	}
	
	.choice-timeout {
		color: #ff6666;
		font-style: italic;
		animation: timeout-pulse 1s ease-in-out infinite;
	}
	
	.countdown-container {
		margin: 1.5rem 0;
		padding: 1rem;
		border: 1px solid var(--neutral-light);
		border-radius: 4px;
		background: rgba(0, 0, 0, 0.3);
	}
	
	.countdown-text {
		color: var(--neutral-light);
		font-family: 'Courier New', monospace;
		font-size: 1rem;
		margin: 0;
		text-align: center;
	}
	
	.countdown-timer {
		color: var(--error-red);
		font-weight: bold;
		font-size: 1.2rem;
		text-shadow: 0 0 5px var(--error-red);
		animation: countdown-pulse 1s ease-in-out infinite;
		display: inline-block;
		min-width: 1.5rem;
		text-align: center;
		vertical-align: baseline;
		line-height: 1;
	}
	
	.blue-pill-ending {
		background: rgba(0, 0, 50, 0.9);
		border: 2px solid #4a90e2;
		padding: 1.5rem;
		margin: 1rem 0;
		border-radius: 4px;
		animation: blue-fade 2s ease-out;
	}
	
	.glitch-text {
		text-shadow: 
			0 0 5px var(--accent-lime),
			0 0 10px var(--accent-lime),
			0 0 15px var(--accent-lime);
		animation: matrix-pulse 1.5s ease-in-out infinite;
	}
	
	.matrix-rain-container {
		overflow: hidden;
		margin: 1rem 0;
	}
	
	.matrix-ascii {
		font-family: 'Courier New', monospace;
		font-size: 8px;
		line-height: 1;
		color: var(--accent-lime);
		text-shadow: 0 0 3px var(--accent-lime);
		text-align: center;
		margin: 0;
		animation: matrix-data-flow 3s ease-in-out;
	}
	
	.matrix-quote-container {
		background: rgba(0, 0, 0, 0.8);
		border: 2px solid var(--neon-pink);
		padding: 1rem;
		margin: 1rem 0;
		border-radius: 4px;
		text-align: center;
		animation: final-glow 2s ease-in-out;
	}
	
	.kung-fu-ascii {
		font-family: 'Courier New', monospace;
		font-size: 6px;
		line-height: 0.8;
		color: var(--neon-pink);
		text-shadow: 0 0 3px var(--neon-pink);
		margin: 0 0 1rem 0;
		animation: ascii-emerge 2s ease-out;
	}
	
	/* ASCII Section Headers */
	.ascii-section-header {
		text-align: center;
		margin-bottom: 1.5rem;
		padding: 1rem;
		background: rgba(0, 0, 0, 0.3);
		border-radius: 4px;
		border: 1px solid rgba(0, 246, 255, 0.2);
	}
	
	.section-ascii {
		font-family: 'Courier New', monospace;
		font-size: 7px;
		line-height: 0.9;
		margin: 0;
		text-shadow: 0 0 3px currentColor;
		animation: section-ascii-glow 3s ease-in-out infinite alternate;
	}
	
	.about-ascii {
		color: var(--neon-pink);
		text-shadow: 0 0 3px var(--neon-pink);
	}
	
	.interests-ascii {
		color: var(--neon-blue);
		text-shadow: 0 0 3px var(--neon-blue);
	}
	
	.blog-ascii {
		color: var(--accent-lime);
		text-shadow: 0 0 3px var(--accent-lime);
	}
	
	@keyframes section-ascii-glow {
		0% {
			text-shadow: 0 0 3px currentColor;
		}
		100% {
			text-shadow: 
				0 0 3px currentColor,
				0 0 8px currentColor,
				0 0 12px currentColor;
		}
	}
	
	@keyframes matrix-flicker {
		0%, 100% { opacity: 1; }
		50% { opacity: 0.8; }
	}
	
	@keyframes glitch-text {
		0%, 100% { transform: translateX(0); }
		20% { transform: translateX(-2px); }
		40% { transform: translateX(2px); }
		60% { transform: translateX(-1px); }
		80% { transform: translateX(1px); }
	}
	
	@keyframes matrix-pulse {
		0% { 
			text-shadow: 0 0 5px var(--accent-lime); 
		}
		50% { 
			text-shadow: 
				0 0 5px var(--accent-lime),
				0 0 15px var(--accent-lime),
				0 0 25px var(--accent-lime); 
		}
		100% { 
			text-shadow: 0 0 5px var(--accent-lime); 
		}
	}
	
	@keyframes matrix-data-flow {
		0% { 
			opacity: 0; 
			transform: translateY(-20px); 
		}
		50% { 
			opacity: 1; 
			transform: translateY(0); 
		}
		100% { 
			opacity: 1; 
			transform: translateY(0); 
		}
	}
	
	@keyframes final-glow {
		0% { 
			border-color: var(--neon-pink);
			box-shadow: 0 0 10px var(--neon-pink); 
		}
		50% { 
			border-color: var(--neon-pink);
			box-shadow: 0 0 20px var(--neon-pink), 0 0 30px var(--neon-pink); 
		}
		100% { 
			border-color: var(--neon-pink);
			box-shadow: 0 0 10px var(--neon-pink); 
		}
	}
	
	@keyframes ascii-emerge {
		0% { 
			opacity: 0; 
			transform: scale(0.8); 
		}
		100% { 
			opacity: 1; 
			transform: scale(1); 
		}
	}
	
	@keyframes matrix-glow {
		0% { text-shadow: 0 0 10px var(--neon-pink); }
		100% { text-shadow: 0 0 20px var(--neon-pink), 0 0 30px var(--neon-pink); }
	}
	
	@keyframes hack-flicker {
		0%, 100% { border-color: var(--error-red); background: rgba(20, 0, 0, 0.9); }
		50% { border-color: #ff6666; background: rgba(40, 0, 0, 0.9); }
	}
	
	@keyframes hack-glitch {
		0%, 100% { transform: translateX(0); opacity: 1; }
		20% { transform: translateX(-2px); opacity: 0.8; }
		40% { transform: translateX(2px); opacity: 0.9; }
		60% { transform: translateX(-1px); opacity: 0.7; }
		80% { transform: translateX(1px); opacity: 1; }
	}
	
	@keyframes final-emerge {
		0% { transform: scale(0.8); opacity: 0; }
		50% { transform: scale(1.1); }
		100% { transform: scale(1); opacity: 1; }
	}
	
	@keyframes command-glitch {
		0%, 100% { text-shadow: 0 0 0 transparent; }
		50% { text-shadow: -1px 0 0 var(--error-red), 1px 0 0 var(--accent-lime); }
	}
	
	@keyframes text-interference {
		0%, 100% { opacity: 0.6; }
		50% { opacity: 0.3; }
	}
	
	@keyframes binary-rain {
		0% { transform: translateY(-20px); opacity: 0; }
		50% { opacity: 1; }
		100% { transform: translateY(0); opacity: 0.8; }
	}
	
	@keyframes cascade-glitch {
		0%, 100% { transform: translateX(0); }
		25% { transform: translateX(-2px) skew(-1deg); }
		75% { transform: translateX(2px) skew(1deg); }
	}
	
	@keyframes gentle-glow {
		0% { 
			border-color: rgba(0, 255, 0, 0.2); 
			box-shadow: 0 0 5px rgba(0, 255, 0, 0.1); 
		}
		100% { 
			border-color: rgba(0, 255, 0, 0.4); 
			box-shadow: 0 0 15px rgba(0, 255, 0, 0.2); 
		}
	}
	
	@keyframes fade-in-slow {
		0% { opacity: 0; transform: translateY(10px); }
		100% { opacity: 1; transform: translateY(0); }
	}
	
	@keyframes profound-emerge {
		0% { 
			opacity: 0; 
			transform: translateY(20px) scale(0.95); 
		}
		70% { 
			opacity: 0.8; 
			transform: translateY(5px) scale(1.02); 
		}
		100% { 
			opacity: 1; 
			transform: translateY(0) scale(1); 
		}
	}
	
	@keyframes fade-cascade {
		0% { opacity: 1; transform: translateY(0); height: auto; margin: 1.5rem 0; }
		70% { opacity: 0.5; transform: translateY(10px); height: auto; margin: 1.5rem 0; }
		90% { opacity: 0; transform: translateY(20px); height: auto; margin: 1.5rem 0; }
		100% { opacity: 0; transform: translateY(20px); height: 0; margin: 0; }
	}
	
	@keyframes pill-choice-appear {
		0% { opacity: 0; transform: scale(0.9); }
		100% { opacity: 1; transform: scale(1); }
	}
	
	@keyframes timeout-pulse {
		0%, 100% { opacity: 0.7; }
		50% { opacity: 1; color: #ff3333; }
	}
	
	@keyframes blue-fade {
		0% { opacity: 0; transform: translateY(-10px); }
		100% { opacity: 1; transform: translateY(0); }
	}
	
	@keyframes countdown-pulse {
		0%, 100% { transform: scale(1); opacity: 1; }
		50% { transform: scale(1.1); opacity: 0.8; }
	}
	
	.scan-text {
		color: var(--neutral-light);
		margin: 0.2rem 0;
		font-family: 'Courier New', monospace;
	}
	
	.hidden-text {
		color: var(--accent-lime);
		background: var(--accent-lime);
		border-radius: 2px;
	}
	
	.scan-section .accent-lime {
		color: var(--accent-lime);
		font-weight: bold;
	}
	
	.scan-section .warning {
		color: var(--warning);
		font-weight: bold;
		text-shadow: 0 0 5px var(--warning);
	}
	
	.ssh-section .status-active {
		color: var(--accent-lime);
		font-weight: bold;
		text-shadow: 0 0 5px var(--accent-lime);
	}
	
	.process-section .neon-blue {
		color: var(--neon-blue);
		font-weight: bold;
	}
	
	.process-section .neon-pink {
		color: var(--neon-pink);
		font-weight: bold;
	}
	
	.process-section .accent-purple {
		color: var(--accent-purple);
		font-weight: bold;
	}
	
	.log-section .scan-text {
		font-size: 0.85rem;
		margin: 0.15rem 0;
	}

	.file-link {
		color: var(--neon-blue);
		text-decoration: none;
		transition: all 0.3s ease;
	}
	
	.file-link:hover {
		color: var(--neon-pink);
		text-shadow: 0 0 8px currentColor;
	}
	
	.cursor-blink {
		animation: blink 1s infinite;
	}
	
	.cursor {
		color: var(--accent-lime);
		animation: blink 1s infinite;
		font-weight: bold;
	}
	
	.loading-text {
		color: var(--neutral-mid);
		animation: loading-dots 2s infinite;
	}
	
	@keyframes loading-dots {
		0%, 20% {
			color: var(--neutral-mid);
			transform: translateY(0);
		}
		40% {
			color: var(--neon-blue);
			transform: translateY(-1px);
		}
		60% {
			color: var(--accent-lime);
			transform: translateY(0);
		}
		80%, 100% {
			color: var(--neutral-mid);
			transform: translateY(0);
		}
	}
	
	/* Smooth fade-in for outputs */
	.output {
		opacity: 0;
		animation: fade-in 0.5s ease-in forwards;
	}
	
	@keyframes fade-in {
		to {
			opacity: 1;
		}
	}
	
	/* Enhanced typing effects */
	.command {
		color: var(--accent-lime);
		margin-left: 0.5rem;
		display: inline-block;
	}
	
	/* Make the neon glow more prominent on interactive elements */
	.file-link:hover {
		color: var(--neon-pink);
		text-shadow: 
			0 0 5px currentColor,
			0 0 10px currentColor,
			0 0 15px currentColor;
		transition: all 0.3s ease;
	}
	
	/* Add a subtle glow effect to the about.txt click handler */
	.file-link[onclick] {
		cursor: pointer;
		transition: all 0.3s ease;
	}
	
	.file-link[onclick]:hover {
		color: var(--warning);
		text-shadow: 
			0 0 5px var(--warning),
			0 0 10px var(--warning);
	}
	
	.typing-animation {
		overflow: hidden;
		border-right: 2px solid var(--accent-lime);
		white-space: nowrap;
		animation: typing 2s steps(6, end), blink-caret 1s step-end infinite;
	}
	
	@keyframes blink {
		0%, 50% { opacity: 1; }
		51%, 100% { opacity: 0; }
	}
	
	@keyframes typing {
		from { width: 0; }
		to { width: 6ch; }
	}
	
	@keyframes blink-caret {
		from, to { border-color: transparent; }
		50% { border-color: var(--accent-lime); }
	}
	
	.about-section p {
		margin: 0.5rem 0;
	}
	
	.system-section {
		border-left: 2px solid rgba(0, 255, 127, 0.3);
		padding-left: 1rem;
	}
	
	.system-section p {
		margin: 0.3rem 0;
		font-family: 'Courier New', monospace;
		font-size: 0.9em;
	}
	
	.interests-section {
		border-left: 2px solid rgba(0, 255, 127, 0.3);
	}
	
	.interests-section .about-content h2 {
		color: var(--neon-blue);
	}
	
	.about-content h2 {
		font-size: 1.5em;
		margin: 1rem 0 0.5rem 0;
		text-shadow: 0 0 15px currentColor;
	}
	
	.neon-glow-blue {
		color: var(--neon-blue);
		text-shadow: 0 0 15px var(--neon-blue);
	}
	
	.about-content strong {
		color: var(--neon-blue);
		text-shadow: 0 0 5px var(--neon-blue);
	}
	
	/* ASCII Art Headers */
	.ascii-header {
		margin: 1rem 0 2rem 0;
		text-align: center;
		display: flex;
		justify-content: center;
		align-items: center;
	}
	
	.ascii-art {
		font-family: 'Courier New', monospace;
		font-size: 10px;
		line-height: 1.1;
		color: var(--neon-blue);
		text-shadow: 
			0 0 5px currentColor,
			0 0 10px currentColor;
		margin: 0;
		white-space: pre;
		overflow-x: auto;
		animation: ascii-glow 3s ease-in-out infinite alternate;
		display: inline-block;
		text-align: left;
	}
	
	.ascii-art.robot-art {
		color: var(--accent-lime);
		text-shadow: 
			0 0 5px var(--accent-lime),
			0 0 10px var(--accent-lime);
	}
	
	.ascii-art.skull-art {
		color: var(--warning);
		text-shadow: 
			0 0 5px var(--warning),
			0 0 10px var(--warning);
		animation: skull-pulse 2s ease-in-out infinite alternate;
	}
	
	.ascii-art.code-art {
		color: var(--neon-pink);
		text-shadow: 
			0 0 5px var(--neon-pink),
			0 0 10px var(--neon-pink);
		animation: code-flicker 2.5s ease-in-out infinite alternate;
	}
	
	@keyframes ascii-glow {
		0% {
			text-shadow: 
				0 0 5px currentColor,
				0 0 10px currentColor;
		}
		100% {
			text-shadow: 
				0 0 8px currentColor,
				0 0 15px currentColor,
				0 0 20px currentColor;
		}
	}
	
	@keyframes skull-pulse {
		0% {
			text-shadow: 
				0 0 5px var(--warning),
				0 0 10px var(--warning);
			opacity: 0.9;
		}
		100% {
			text-shadow: 
				0 0 10px var(--warning),
				0 0 20px var(--warning),
				0 0 25px rgba(255, 65, 54, 0.5);
			opacity: 1;
		}
	}
	
	@keyframes code-flicker {
		0% {
			text-shadow: 
				0 0 5px var(--neon-pink),
				0 0 10px var(--neon-pink);
		}
		50% {
			text-shadow: 
				0 0 8px var(--neon-pink),
				0 0 15px var(--neon-pink),
				0 0 20px rgba(255, 20, 147, 0.3);
		}
		100% {
			text-shadow: 
				0 0 12px var(--neon-pink),
				0 0 18px var(--neon-pink),
				0 0 25px rgba(255, 20, 147, 0.5);
		}
	}
	
	@media (max-width: 768px) {
		.terminal-container {
			padding: 1rem 0.5rem;
		}
		
		.terminal-window {
			font-size: 12px;
		}
		
		.sign-text {
			font-size: 2rem;
			letter-spacing: 0.2rem;
		}
		
		.neon-line {
			max-width: 280px;
		}
		
		.terminal-body {
			padding: 1rem;
		}
		
		/* Pill choice container mobile optimization */
		.pill-choice-container {
			margin: 1rem 0;
			padding: 1rem;
			/* Ensure it fits within viewport */
			max-width: 100%;
			box-sizing: border-box;
			/* Prevent horizontal overflow */
			overflow-x: hidden;
		}
		
		.morpheus-text {
			font-size: 0.9rem;
			line-height: 1.5;
			margin: 0.75rem 0;
		}
		
		/* Pill buttons mobile optimization */
		.pill-button {
			padding: 0.75rem 1.5rem;
			font-size: 0.9rem;
			min-width: 120px;
		}
		
		.pill-buttons {
			gap: 1rem;
			flex-wrap: wrap;
		}
		
		/* ASCII Art Mobile Optimization */
		.ascii-header {
			margin: 0.5rem 0 1.5rem 0;
			padding: 0;
			display: flex;
			justify-content: center;
			align-items: center;
			width: 100%;
		}
		
		.ascii-section-header {
			display: flex;
			justify-content: center;
			align-items: center;
			margin: 0.5rem auto;
			padding: 0.5rem;
			width: calc(100% - 1rem);
			max-width: 100%;
			text-align: center;
			box-sizing: border-box;
			overflow: hidden;
		}
		
		.ascii-art {
			font-size: 6px;
			line-height: 1;
			margin: 0 auto;
			text-align: center;
			max-width: 95vw;
			overflow-x: auto;
			display: block;
		}
		
		.section-ascii {
			font-size: 5px;
			line-height: 0.8;
			text-align: center;
			max-width: 100vw;
			overflow-x: auto;
			margin: 0 auto;
			display: block;
			width: fit-content;
		}
		
		/* Recent posts mobile fix */
		.blog-ascii {
			font-size: 4px;
			line-height: 0.8;
		}
		
		/* Countdown timer mobile fixes */
		.countdown-timer {
			font-size: 1.2rem !important;
			min-width: 1.5rem;
			-webkit-text-stroke: 0.5px var(--error-red);
			font-family: 'Courier New', monospace;
			font-weight: 900;
			display: inline-block;
			text-align: center;
			/* Prevent text from disappearing on mobile */
			-webkit-font-smoothing: antialiased;
			-moz-osx-font-smoothing: grayscale;
			/* Ensure it stays visible */
			opacity: 1 !important;
			visibility: visible !important;
			/* Prevent overflow */
			max-width: 2rem;
			overflow: hidden;
			/* Fix vertical alignment */
			vertical-align: baseline;
			line-height: 1;
		}
		
		.countdown-text {
			font-size: 0.85rem;
			/* Allow wrapping on mobile */
			white-space: normal;
			text-align: center;
			line-height: 1.4;
			margin: 0;
			padding: 0;
		}
		
		.countdown-container {
			/* Ensure container doesn't collapse */
			min-height: 3rem;
			display: flex;
			align-items: center;
			justify-content: center;
			/* Ensure it fits within viewport */
			max-width: 100%;
			margin: 1rem auto;
			padding: 0.75rem;
			box-sizing: border-box;
			/* Prevent overflow */
			overflow: hidden;
		}
	}
</style>
